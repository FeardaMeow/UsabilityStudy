beta[j+i+1] <- rgamma(1,shape=alpha[j+i+1]+.1,rate=gamma[j+i]+1)
}
}
alpha
beta
alpha <- c(1:1001)
beta <- c(1:1001)
gamma <- c(1:1000)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (j in seq(from=0, to=1000, by=10)) {
for (i in 1:length(y)) {
gamma[j+i] <- rgamma(1, shape=y[i]+alpha[j+i], rate=t[i]+beta[j+i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[j+i]
u <- runif(1,0,1)
p <- min(((beta[j+i]^alpha.proposal)*(gamma[j+i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[j+i]^alpha[j+i])*(gamma[j+i]^(alpha[j+i]-1))*(exp(alpha[j+i]))/gamma(alpha[j+i])),1)
alpha[j+i+1] <- ifelse(u<=p,alpha.proposal,alpha[j+i])
#Estimate beta
beta[j+i+1] <- rgamma(1,shape=alpha[j+i+1]+.1,rate=gamma[j+i]+1)
}
}
alpha
beta
y <- c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22)
t <- c(94.3, 15.7, 62.9, 126, 5.24, 31.4, 1.05, 1.05, 2.1, 10.5)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha
beta
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha
beta
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha.avg <- mean(alpha)
beta.avg <- mean(beta)
gamma.avg <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
beta.avg
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
beta.avg
alpha.avg
gamma.avg
warnings()
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
beta.avg
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
alpha.avg
beta.avg
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.05),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
alpha.avg
hist(alpha.avg)
hist(beta.avg)
hist(gamma.avg)
plot(alpha.avg)
plot(beta.avg)
plot(gamma.avg)
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.01),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
plot(alpha.avg)
plot(beta.avg)
plot(gamma.avg)
set.seed(1)
n <- 2000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.01),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
plot(alpha.avg)
set.seed(1)
n <- 2000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.01),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
plot(beta.avg)
hist(alpha.avg)
hist(beta.avg)
hist(gamma.avg)
mean(alpha.avg)
mean(beta.avg)
set.seed(1)
n <- 2000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.01) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
n <- 2000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
set.seed(1)
n <- 2000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
mean(alpha.avg)
set.seed(1)
n <- 5000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.01) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
mean(alpha.avg)
set.seed(1)
n <- 5000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
mean(alpha.avg)
plot(alpha.avg)
mean(beta.avg)
plot(beta.avg)
myDF <- data.entry(x=1, m=I(list()))
myDF <- data.frame(x=1, m=I(list()))
myDF <- data.frame(x=1, m=I(list()))
yDF <- data.frame(i=integer(), m=I(list()))
View(yDF)
string()
chracter()
character()
x <- list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
y <- list(c("1 (Not at all)","2","3","4","5","6","7","8","9","10 (Extremly high)"))
Qlist <- data.frame(Qnum=integer(), Question=character(), Answers=I(list()))
Qlist[1]
Qlist[1,]
Qlist$Qnum <- 1:13
Overall, I am satisfied with how easy it is to use this system.
The system was simple to use.
I can effectively complete my work using this system.
I am able to complete my work quickly using this system.
It was easy to learn to use this system.
It is easy to find the item prediction I needed.
The item predictions are effective in helping me complete the tasks and scenarios.
The organization of item predictions on the system screens is clear.
I like using the interface of this system.
This system has all the functions and capabilities I expect it to have or needed.
Overall, I am satisfied with this system.
Rate the level of trust in the item prediction generated from the dashboard?
How confident do you feel about your previous trust rating in Q13?
Qlist <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.", Answers=I(x))
Qlist <- data.frame(Qnum=c(1,2), Question=c("Overall, I am satisfied with how easy it is to use this system.", "The system was simple to use."), Answers=I(c(x,x)))
Qlist$Answers
Qlist$Answers[1]
as.vector(Qlist$Answers[1])
1:13
rep(x,2)
Qlist[1,]$Answers
unlist(Qlist[1,]$Answers)
shiny::runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
setwd("D:\\Program File\\Git\\git_projects\\RA\\UsabilityStudy")
Qlist <- read.csv("Qlist.csv")
View(Qlist)
Qlist <- read.csv("Qlist.csv")
View(Qlist)
Qlist$Answer10
Qlist[1,]$Answer10
Qlist <- read.csv("Qlist.csv", colClasses = c("integer", rep("character",11)))
runApp()
