}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])$value[i], p=0.8, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(get(data.sets[i])$value[i])
trainIndex <- createDataPartition(get(data.sets[i])$value[i], p=0.8, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
get(data.sets[1])$value[1]
get(data.sets[1])
get(data.sets[1])$BPchange
get(data.sets[1])$"BPchange"
get(data.sets[1])$value[1]
get(data.sets[1])[,value[1]]
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.8, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.8, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
results
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.8, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
print(temp)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
print(temp)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
print(data_train)
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
print(temp)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Plant+Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
CO2
results
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","Treatment","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
print(results)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","Treatment","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
print(temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","Treatment","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- sqrt(mean(data_test$value[i]-predict(lm(formula(formula[i]), data=data_train), data=data_test)))
print(test.RMSE)
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
print(temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","Treatment","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- predict(lm(formula(formula[i]), data=data_train), data=data_test)
print(test.RMSE)
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
print(temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- predict(lm(formula(formula[i]), data=data_train), data=data_test)
test.RMSE <- data_test[,value[i]]-test.RMSE
print(test.RMSE)
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- predict(lm(formula(formula[i]), data=data_train), data=data_test)
test.RMSE <- mean(data_test[,value[i]]-test.RMSE)
print(test.RMSE)
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
print(i)
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- predict(lm(formula(formula[i]), data=data_train), data=data_test)
test.RMSE <- sqrt(mean((data_test[,value[i]]-test.RMSE)^2))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
rbind(results,temp)
}
results
library(MASS)
library(datasets)
library(caret)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- predict(lm(formula(formula[i]), data=data_train), data=data_test)
test.RMSE <- sqrt(mean((data_test[,value[i]]-test.RMSE)^2))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
results <- rbind(results,temp)
}
results
kable(results, caption = "A table of the 10-fold cross validation root mean square error and standard deviation compared to the test set root mean square error")
library(MASS)
library(datasets)
library(caret)
library(knitr)
results <- data.frame(data=character(), RMSE=double(), RMSESD=double(), testRMSE=double())
data.sets <- c("Rabbit","CO2","faithful","cats","iris","ToothGrowth","wtloss","warpbreaks","GAGurine","cars")
formula <- c("BPchange~Dose+Run+Treatment+Animal",
"uptake~Type+Treatment+conc",
"eruptions~waiting",
"Bwt~Sex+Hwt",
"Sepal.Length~Sepal.Width+Petal.Length+Petal.Width+Species",
"len~supp+dose",
"Weight~Days",
"breaks~wool+tension",
"GAG~Age",
"dist~speed")
value <- c("BPchange","uptake","eruptions","Bwt","Sepal.Length","len","Weight","breaks","GAG","dist")
for (i in 1:10) {
#Create initial train, test split
trainIndex <- createDataPartition(get(data.sets[i])[,value[i]], p=0.5, list=FALSE)
data_train <- get(data.sets[i])[trainIndex,]
data_test <- get(data.sets[i])[-trainIndex,]
tenfold_cv <- trainControl(method="cv", number=10)
model <- train(formula(formula[i]), data=data_train, trControl=tenfold_cv, method="lm")
test.RMSE <- predict(lm(formula(formula[i]), data=data_train), data=data_test)
test.RMSE <- sqrt(mean((data_test[,value[i]]-test.RMSE)^2))
temp <- data.frame(data=data.sets[i], RMSE=model$results$RMSE, RMSESD=model$results$RMSESD, testRMSE=test.RMSE)
results <- rbind(results,temp)
}
kable(results, caption = "A table of the 10-fold cross validation root mean square error and standard deviation compared to the test set root mean square error")
shiny::runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
submenu.content <- list(menuSubItem("LL", tabName = "Situation LL"),
menuSubItem("LH", tabName = "Situation LH"),
menuSubItem("ML", tabName = "Situation ML"),
menuSubItem("MH", tabName = "Situation MH"),
menuSubItem("HL", tabName = "Situation HL"),
menuSubItem("HH", tabName = "Situation HH"))
sample(submenu.content)
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
setwd("D:\\Program File\\Git\\git_projects\\RA\\UsabilityStudy")
