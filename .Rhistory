beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha
beta
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha
beta
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha.avg <- mean(alpha)
beta.avg <- mean(beta)
gamma.avg <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
beta.avg
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=alpha[i+1]+.1,rate=gamma[i]+1)
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
beta.avg
alpha.avg
gamma.avg
warnings()
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
beta.avg
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
alpha.avg
beta.avg
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
#using proposal dist normal with variance of exp(1)
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.05),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
alpha.avg
hist(alpha.avg)
hist(beta.avg)
hist(gamma.avg)
plot(alpha.avg)
plot(beta.avg)
plot(gamma.avg)
set.seed(1)
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:1000)
beta.avg <- c(1:1000)
gamma.avg <- c(1:1000)
for (j in 1:1000) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.01),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
plot(alpha.avg)
plot(beta.avg)
plot(gamma.avg)
set.seed(1)
n <- 2000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.01),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha[11]
beta[1] <- beta[11]
}
plot(alpha.avg)
set.seed(1)
n <- 2000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.1) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.01),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
plot(beta.avg)
hist(alpha.avg)
hist(beta.avg)
hist(gamma.avg)
mean(alpha.avg)
mean(beta.avg)
set.seed(1)
n <- 2000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.01) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
n <- 2000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
set.seed(1)
n <- 2000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
mean(alpha.avg)
set.seed(1)
n <- 5000
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.01) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
plot(alpha.avg)
mean(alpha.avg)
set.seed(1)
n <- 5000
#initialize starting values
alpha <- c(1:11)
beta <- c(1:11)
gamma <- c(1:10)
alpha[1] <- rexp(1, rate=1)
beta[1] <- rgamma(1, shape=0.1, rate=1)
alpha.avg <- c(1:n)
beta.avg <- c(1:n)
gamma.avg <- c(1:n)
#MH withing Gibbs
for (j in 1:n) {
for (i in 1:length(y)) {
#Estimate gamma
gamma[i] <- rgamma(1, shape=y[i]+alpha[i], rate=t[i]+beta[i])
#Estimate alpha
alpha.proposal <- rnorm(1, mean = 0, sd=.05) + alpha[i]
u <- runif(1,0,1)
p <- min(((beta[i]^alpha.proposal)*(gamma[i]^(alpha.proposal-1))*(exp(alpha.proposal))/gamma(alpha.proposal))/((beta[i]^alpha[i])*(gamma[i]^(alpha[i]-1))*(exp(alpha[i]))/gamma(alpha[i])),1)
alpha[i+1] <- ifelse(u<=p,alpha.proposal,alpha[i])
#Estimate beta
beta[i+1] <- rgamma(1,shape=(alpha[i+1]+.1),rate=(gamma[i]+1))
}
alpha.avg[j] <- mean(alpha)
beta.avg[j] <- mean(beta)
gamma.avg[j] <- mean(gamma)
alpha[1] <- alpha.avg[j]
beta[1] <- beta.avg[j]
}
mean(alpha.avg)
plot(alpha.avg)
mean(beta.avg)
plot(beta.avg)
shiny::runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
runApp('D:/Program File/Git/git_projects/RA/UsabilityStudy')
Qlist <- read.csv("Qlist.csv")
setwd("D:\\Program File\\Git\\git_projects\\RA\\UsabilityStudy")
Qlist <- read.csv("Qlist.csv")
View(Qlist)
as.matrix(Qlist[Qlist!=""])
temp <- as.matrix(Qlist[Qlist!=""])
temp
temp[1,1]
temp[1,2]
temp[2,]
temp[2,1]
temp
View(Qlist)
qlist <- Qlist[1,3:9]
as.matrix(qlist[qlist!=""])
df.q <- data.frame(Qnum="", Question="", Answers="")
View(df.q)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
View(df.q)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=c(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)")))
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=c(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)")))
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers="")
df.q[1,]$Answers <- list("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)")
list("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)")
list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
df.q[1,]$Answers <- list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
df.q[1,]$Answers <- list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
df.q$Answers[1] <- list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)")), stringAsFactors=FALSE)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers="")
df.q$Answers[1] <- list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
df.q$Answers[1] <- as.character(list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)")))
x <- list(c("1 (strongly disagree)","2","3","4","5","6","7 (strongly agree)"))
x
df.q$Answers[1] <- x
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list())
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(x(1,2,3)))
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(c(1,2,3)))
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(1)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(1)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(1,2)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(1,2)
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(1,2)
.
;
exit()
ds
ds
df.q <- data.frame(Qnum=1, Question="Overall, I am satisfied with how easy it is to use this system.
", Answers=list(1,2)
)
)
)
)
)
)
0
