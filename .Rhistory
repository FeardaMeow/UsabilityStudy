#' @param top integer that indicates how many packages to include in the graph
#' @param cex character expansion ratio for plot
#' @param random.seed A random seed value. Used by igraph to initialise the plot layout. The function resets the seed to the original value, i.e. it will not have any impact on the random value stream in your R session.
#'
#' @export
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex)
}
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-05-15/"
pr <- compute_pagerank(MRAN)
head(pr, 10)
plot_graph(MRAN, 10)
library(miniCRAN)
library(igraph)
library(memoise)
library(utils)
makeDepGraph <- function(pdb, pkg = pdb[, "Package"]){
miniCRAN::makeDepGraph(pkg,
availPkgs = pdb,
suggests=FALSE,
enhances=TRUE,
includeBasePkgs = FALSE)
}
getPackages <- function(mirror){
available.packages(
contrib.url(mirror, type = "source"),
type="source",
filters = NULL)
}
getGraph <- memoise(makeDepGraph)
#' Computes pagerank for CRAN packages.
#'
#' @param mirror CRAN mirror, e.g. http://cran.revolutionanalytics.com or https://mran.revolutionanalytics.com/snapshot/2016-03-15
#'
#' @param decreasing If TRUE, sorts the result in decreasing order
#'
#' @example /inst/examples/examples_compute_pagerank.R
@export
compute_pagerank <- function(mirror, decreasing = TRUE){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- page.rank(g, directed = FALSE)$vector
if(decreasing) sort(pr, decreasing = TRUE) else pr
}
#' Plots the dependency graph
#'
#' @inheritParams compute_pagerank
#' @param top integer that indicates how many packages to include in the graph
#' @param cex character expansion ratio for plot
#' @param random.seed A random seed value. Used by igraph to initialise the plot layout. The function resets the seed to the original value, i.e. it will not have any impact on the random value stream in your R session.
#'
#' @export
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex)
}
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-05-15/"
pr <- compute_pagerank(MRAN)
head(pr, 10)
plot_graph(MRAN, 10)
MRAN_1 <- "https://mran.revolutionanalytics.com/snapshot/2000-02-29/"
pr_1 <- compute_pagerank(MRAN_1)
MRAN_1 <- "https://mran.revolutionanalytics.com/snapshot/2005-02-29/"
pr_1 <- compute_pagerank(MRAN_1)
MRAN_1 <- "https://mran.revolutionanalytics.com/snapshot/2014-09-09/"
pr_1 <- compute_pagerank(MRAN_1)
plot_graph(MRAN_1, 10)
plot(pr)
pr > 0.02
head(pr, 10)
plot_graph(MRAN, 25)
plot_graph(MRAN, 50)
MRAN_1 <- "https://mran.revolutionanalytics.com/snapshot/2014-09-09/"
pr_1 <- compute_pagerank(MRAN_1)
pr_1
head(pr_1,25)
plot_graph(MRAN_1, 10, cex = 0.8)
plot_graph(MRAN_1, 10)
plot_graph(MRAN_1, 25)
plot_graph(MRAN_1, 50)
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-06-06/"
pr <- compute_pagerank(MRAN)
head(pr, 10)
plot_graph(MRAN, 10)
plot_graph(MRAN, 25)
plot_graph(MRAN, 50)
library(miniCRAN)
library(igraph)
library(memoise)
library(utils)
makeDepGraph <- function(pdb, pkg = pdb[, "Package"]){
miniCRAN::makeDepGraph(pkg,
availPkgs = pdb,
suggests=FALSE,
enhances=TRUE,
includeBasePkgs = FALSE)
}
getPackages <- function(mirror){
available.packages(
contrib.url(mirror, type = "source"),
type="source",
filters = NULL)
}
getGraph <- memoise(makeDepGraph)
#' @param mirror CRAN mirror, e.g. http://cran.revolutionanalytics.com or https://mran.revolutionanalytics.com/snapshot/2016-03-15
#'
#' @param decreasing If TRUE, sorts the result in decreasing order
#'
#' @example /inst/examples/examples_compute_pagerank.R
@export
compute_pagerank <- function(mirror, decreasing = TRUE){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- page.rank(g, directed = FALSE)$vector
if(decreasing) sort(pr, decreasing = TRUE) else pr
}
#' Plots the dependency graph
#'
#' @inheritParams compute_pagerank
#' @param top integer that indicates how many packages to include in the graph
#' @param cex character expansion ratio for plot
#' @param random.seed A random seed value. Used by igraph to initialise the plot layout. The function resets the seed to the original value, i.e. it will not have any impact on the random value stream in your R session.
#'
#' @export
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex)
}
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-05-15/"
pr <- compute_pagerank(MRAN)
MRAN_1 <- "https://mran.revolutionanalytics.com/snapshot/2014-09-09/"
pr_1 <- compute_pagerank(MRAN_1)
MRAN <- "https://mran.revolutionanalytics.com/snapshot/2017-06-06/"
pr <- compute_pagerank(MRAN)
plot_graph(MRAN, 10)
plot_graph(MRAN, 10, cex = 0.8)
plot_graph(MRAN, 10, cex = 1.5)
plot_graph(MRAN, 10, cex = 0.8)
?plot
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex, pch = 10)
}
plot_graph(MRAN, 10)
plot_graph <- function(mirror, top = 25, cex = 0.5, random.seed = 1){
pdb <- getPackages(mirror)
g <- getGraph(pdb)
pr <- compute_pagerank(mirror, decreasing = TRUE)
pr <- names(head(pr, top))
pdb <- getGraph(pdb, pr)
old.seed <- .Random.seed
on.exit(.Random.seed <- old.seed)
set.seed(random.seed)
plot(pdb, main = sprintf("Top %s packages by page rank", length(pr)), cex = cex)
}
plot_graph(MRAN_1, 10, cex = 0.8)
plot_graph(MRAN_1, 10, cex = 1)
plot_graph(MRAN_1, 10, cex = 0.9)
source('~/Desktop/pagerank-master/inst/examples/examples_compute_pagerank.R', echo=TRUE)
plot_graph(MRAN_1, 25, cex = 0.9)
plot_graph(MRAN_1, 50, cex = 0.9)
plot_graph(MRAN_1, 50, cex = 0.8)
plot_graph(MRAN_1, 50, cex = 0.6)
plot_graph(MRAN_1, 50, cex = 0.7)
plot_graph(MRAN, 10, cex = 0.9)
plot_graph(MRAN, 25, cex = 0.9)
plot_graph(MRAN, 50, cex = 0.7)
cite(igraph.arpack.default)
cite("igraph")
citation("igraph")
citation("miniCRAN")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='dmdii', token='20FB26F07BCD7288F59BA6FBF5858CEF', secret='poHULxY3ciPAuv+Mr8TJWoNmb8hyBieag85KCrak')
shiny::runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
library(rsconnect)
rsconnect::deployApp('/Users/jundiliu/Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
runApp('Desktop/DMDII-prototype')
rsconnect::deployApp('/Users/jundiliu/Desktop/DMDII-prototype')
shiny::runApp('Desktop/GEdashboard')
runApp('Desktop/GEdashboard')
?event_data
runApp('Desktop/GEdashboard')
runApp('Desktop/GEdashboard')
runApp('Desktop/GEdashboard')
runApp('Desktop/GEdashboard')
runApp('Desktop/GEdashboard')
runApp('Desktop/GEdashboard')
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
AD <- read.csv(text=getURL("https://raw.githubusercontent.com/shuailab/ind_498/master/resource/data/AD2.csv"))
View(AD)
install.packages("partykit")
?mutate
??mutate
library(dplyr)
?mutate
library(rpart)
library(rpart.plot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RCurl)
library(partykit)
tree <- rpart( TOTAL13 ~ ., AD_full, method="anova")
AD_full <- AD[,c(1:15,17)]
library(rpart)
library(rpart.plot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RCurl)
library(partykit)
tree <- rpart( TOTAL13 ~ ., AD_full, method="anova")
prp(tree,nn.cex=1)
pred_tree <- predict(tree, AD_full)
pred_linear <- predict(lm.AD.F, AD_full)
library(rpart)
library(rpart.plot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RCurl)
library(partykit)
data_pred <- data %>% mutate( pred_tree_class = ifelse( pred_tree <13.95,0,1)  ) %>%
mutate( pred_tree_class = as.factor(as.character(pred_tree_class) )) %>%
mutate( pred_linear_class = ifelse( pred_linear <13.95,0,1)  ) %>%
mutate( pred_linear_class = as.factor(as.character(pred_linear_class) ))
dt <- data.frame(c(1,0.22,0.38,"No"),c(2,0.58,0.32,"Yes"))
View(dt)
dt <- data.frame(c(0.22, 0.58, 0.57, 0.41, 0.6, 0.12, 0.25, 0.32),
c(0.38, 0.32, 0.28, 0.43, 0.29, 0.32, 0.32, 0.38),
c("No", "Yes", "Yes", "Yes", "No", "Yes", "Yes", "No"))
View(dt)
colnames(dt) <- c("X1", "X2", "Y")
order(dt$X1)
tree <- rpart(Y~., data = dt)
prp(tree,nn.cex=1)
View(dt)
tree <- rpart(Y~X1+X2, data = dt)
library(rpart)
tree <- rpart(Y~X1+X2, data = dt)
tree
prp(tree,nn.cex=1)
library(rpart)
library(rpart.plot)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RCurl)
library(partykit)
tree <- rpart(Y~., data = dt)
plot(tree)
plot(tree)
prp(tree)
tree <- rpart( DX_bl ~ ., data)
model <- rpart(dt$Y~dt$X1+dt$X2)
?prp
prp(model)
dt$Y <- as.factor(as.character(dt$Y))
model <- rpart(dt$Y~dt$X1+dt$X2)
prp(model)
model$frame
dt <- data.frame(c(0.22, 0.58, 0.57, 0.41, 0.6, 0.12, 0.25, 0.32),
c(0.38, 0.32, 0.28, 0.43, 0.29, 0.32, 0.32, 0.38),
c("No", "Yes", "Yes", "Yes", "No", "Yes", "Yes", "No"))
colnames(dt) <- c("X1", "X2", "Y")
dt$Y <- as.factor(as.character(dt$Y))
tree <- rpart(Y ~ ., dt, method = "anova")
prp(tree, nn.cex = 1)
dt <- data.frame(c(0.22, 0.58, 0.57, 0.41, 0.6, 0.12, 0.25, 0.32),
c(0.38, 0.32, 0.28, 0.43, 0.29, 0.32, 0.32, 0.38),
c("No", "Yes", "Yes", "Yes", "No", "Yes", "Yes", "No"))
colnames(dt) <- c("X1", "X2", "Y")
dt$Y <- as.factor(as.character(dt$Y))
tree <- rpart(Y ~ ., dt, method = "anova")
prp(tree, nn.cex = 1)
str(dt)
tree <- rpart( TOTAL13 ~ ., AD_full, method="anova")
prp(tree,nn.cex=1)
dt <- data.frame(c(0.22, 0.58, 0.57, 0.41, 0.6, 0.12, 0.25, 0.32),
c(0.38, 0.32, 0.28, 0.43, 0.29, 0.32, 0.32, 0.38),
c("No", "Yes", "Yes", "Yes", "No", "Yes", "Yes", "No"))
colnames(dt) <- c("X1", "X2", "Y")
dt$Y <- as.factor(as.character(dt$Y))
tree <- rpart(Y ~ ., dt, method = "anova")
prp(tree, nn.cex = 1)
library(rpart)
library("rpart")
library(rpart)
library(rpart.plot)
dt <- data.frame(c(0.22, 0.58, 0.57, 0.41, 0.6, 0.12, 0.25, 0.32),
c(0.38, 0.32, 0.28, 0.43, 0.29, 0.32, 0.32, 0.38),
c("No", "Yes", "Yes", "Yes", "No", "Yes", "Yes", "No"))
colnames(dt) <- c("X1", "X2", "Y")
dt$Y <- as.factor(as.character(dt$Y))
View(dt)
tree <- rpart(Y ~ ., dt, method = "anova")
tree <- rpart(Y ~ X1 + X2, dt, method = "anova")
prp(tree, nn.cex = 1)
order(dt$X1)
dt$X1[order(dt$X1)]
#Ordered X1 values
X1 <- dt$X1[order(dt$X1)]
print(X1)
#Ordered X1 values
X1 <- dt$X1[order(dt$X1)]
X1
setwd('/Users/jundiliu/Desktop/DMDII')
GE <- read.csv('PO_cleaned.csv', header = T)
GE.MFA <- subset(GE, select = c("Vendor", "MaterialNumber", "Plnt", "MaterialGroup"))
GE.MFA$Vendor <- as.factor(GE.MFA$Vendor)
GE.MFA$MaterialNumber <- as.factor(GE.MFA$MaterialNumber)
GE.MFA$Plnt <- as.factor(GE.MFA$Plnt)
GE.MFA$MaterialGroup <- as.factor(GE.MFA$MaterialGroup)
View(GE.MFA)
sort(table(GE.MFA$Vendor),decreasing=TRUE)[1:10]
Vendor.levels <- sort(table(GE.MFA$Vendor),decreasing=TRUE)[1:10]
Vendor.levels <- sort(table(GE.MFA$Vendor),decreasing=TRUE)
Vendor.levels <- as.data.frame(sort(table(GE.MFA$Vendor),decreasing=TRUE))
View(Vendor.levels)
View(Vendor.levels)
colnames(Vendor.levels) <- c("Vendor", "Freq")
for (i in length(GE.MFA$Vendor)){
ifelse(GE.MFA$Vendor[i] %in% Vendor.levels$Vendor[1:10], TRUE, GE.MFA$Vendor[i] <- NA)
}
summary(GE.MFA$Vendor)
Vendor.levels <- as.data.frame(sort(table(GE.MFA$Vendor),decreasing=TRUE))
colnames(Vendor.levels) <- c("Vendor", "Freq")
Vendor.bin <- GE.MFA$Vendor %in% Vendor.levels$Vendor[1:10]
GE.MFA$Vendor <- GE.MFA$Vendor * Vendor.bin
c(1,2) *c(TRUE, FALSE)
c(2,2) *c(TRUE, FALSE)
c("a","b") *c(TRUE, FALSE)
Vendor.levels <- as.data.frame(sort(table(GE.MFA$Vendor),decreasing=TRUE))
colnames(Vendor.levels) <- c("Vendor", "Freq")
GE <- read.csv('PO_cleaned.csv', header = T)
GE.MFA <- subset(GE, select = c("Vendor", "MaterialNumber", "Plnt", "MaterialGroup"))
GE.MFA$Vendor <- as.factor(GE.MFA$Vendor)
GE.MFA$MaterialNumber <- as.factor(GE.MFA$MaterialNumber)
GE.MFA$Plnt <- as.factor(GE.MFA$Plnt)
GE.MFA$MaterialGroup <- as.factor(GE.MFA$MaterialGroup)
Vendor.levels <- as.data.frame(sort(table(GE.MFA$Vendor),decreasing=TRUE))
colnames(Vendor.levels) <- c("Vendor", "Freq")
Vendor.bin <- GE.MFA$Vendor %in% Vendor.levels$Vendor[1:10]
GE.MFA$Vendor <- as.numeric(GE.MFA$Vendor) * Vendor.bin
GE.MFA$Vendor <- as.factor(GE.MFA$Vendor)
summary(GE.MFA$Vendor)
View(Vendor.levels)
GE <- read.csv('PO_cleaned.csv', header = T)
GE.MFA <- subset(GE, select = c("Vendor", "MaterialNumber", "Plnt", "MaterialGroup"))
GE.MFA$Vendor <- as.factor(GE.MFA$Vendor)
GE.MFA$MaterialNumber <- as.factor(GE.MFA$MaterialNumber)
GE.MFA$Plnt <- as.factor(GE.MFA$Plnt)
GE.MFA$MaterialGroup <- as.factor(GE.MFA$MaterialGroup)
GE <- read.csv('PO_cleaned.csv', header = T)
GE.MFA <- subset(GE, select = c("Vendor", "MaterialNumber", "Plnt", "MaterialGroup"))
Vendor.levels <- as.data.frame(sort(table(GE.MFA$Vendor),decreasing=TRUE))
colnames(Vendor.levels) <- c("Vendor", "Freq")
Vendor.bin <- GE.MFA$Vendor %in% Vendor.levels$Vendor[1:10]
GE.MFA$Vendor <- GE.MFA$Vendor * Vendor.bin
GE.MFA$Vendor <- as.factor(GE.MFA$Vendor)
summary(GE.MFA$Vendor)
View(Vendor.levels)
View(GE.MFA)
View(Vendor.levels)
GE.MFA$Vendor[which(GE.MFA$Vendor == '0')] <- NA
summary(GE.MFA$Vendor)
GE.MFA$Vendor <- as.factor(as.numeric(GE.MFA$Vendor))
summary(GE.MFA$Vendor)
GE <- read.csv('PO_cleaned.csv', header = T)
GE.MFA <- subset(GE, select = c("Vendor", "MaterialNumber", "Plnt", "MaterialGroup"))
Vendor.levels <- as.data.frame(sort(table(GE.MFA$Vendor),decreasing=TRUE))
colnames(Vendor.levels) <- c("Vendor", "Freq")
Vendor.bin <- GE.MFA$Vendor %in% Vendor.levels$Vendor[1:10]
GE.MFA$Vendor <- GE.MFA$Vendor * Vendor.bin
GE.MFA$Vendor <- as.factor(GE.MFA$Vendor)
GE.MFA$Vendor[which(GE.MFA$Vendor == '0')] <- NA
GE.MFA$Vendor <- as.factor(as.character(GE.MFA$Vendor))
summary(GE.MFA$Vendor)
View(Vendor.levels)
shiny::runApp('~/Desktop/UsabilityStudy')
runApp('~/Desktop/UsabilityStudy')
df.employee <- read.csv("fakeEmployee.csv")
df.group <- data.frame(df.employee %>% group_by(item_id, sequence_id, complete_qty, reject_qty) %>%
summarise(Lower_bound=mean(Lower_bound), predicted_hrs=mean(predicted_hrs), Upper_bound=mean(Upper_bound)) %>%
group_by(item_id, complete_qty, reject_qty) %>% summarise(Lower_bound=round(sum(Lower_bound), digits=1),
predicted_hrs=round(sum(predicted_hrs), digits=1),
Upper_bound=round(sum(Upper_bound), digits=1)))
df.plot <- data.frame(
df.group %>%
group_by(item_id, complete_qty) %>%
summarise(Lower_bound=round(sum(Lower_bound), digits=1),
predicted_hrs=round(sum(predicted_hrs), digits=1),
Upper_bound=round(sum(Upper_bound), digits=1))
)
setwd("~/Desktop/UsabilityStudy")
df.employee <- read.csv("fakeEmployee.csv")
df.group <- data.frame(df.employee %>% group_by(item_id, sequence_id, complete_qty, reject_qty) %>%
summarise(Lower_bound=mean(Lower_bound), predicted_hrs=mean(predicted_hrs), Upper_bound=mean(Upper_bound)) %>%
group_by(item_id, complete_qty, reject_qty) %>% summarise(Lower_bound=round(sum(Lower_bound), digits=1),
predicted_hrs=round(sum(predicted_hrs), digits=1),
Upper_bound=round(sum(Upper_bound), digits=1)))
df.plot <- data.frame(
df.group %>%
group_by(item_id, complete_qty) %>%
summarise(Lower_bound=round(sum(Lower_bound), digits=1),
predicted_hrs=round(sum(predicted_hrs), digits=1),
Upper_bound=round(sum(Upper_bound), digits=1))
)
runApp()
df.employee <- read.csv("fakeEmployee.csv")
df.group <- data.frame(df.employee %>% group_by(item_id, sequence_id, complete_qty, reject_qty) %>%
summarise(Lower_bound=mean(Lower_bound), predicted_hrs=mean(predicted_hrs), Upper_bound=mean(Upper_bound)) %>%
group_by(item_id, complete_qty, reject_qty) %>% summarise(Lower_bound=round(sum(Lower_bound), digits=1),
predicted_hrs=round(sum(predicted_hrs), digits=1),
Upper_bound=round(sum(Upper_bound), digits=1)))
df.plot <- data.frame(
df.group %>%
group_by(item_id, complete_qty) %>%
summarise(Lower_bound=round(sum(Lower_bound), digits=1),
predicted_hrs=round(sum(predicted_hrs), digits=1),
Upper_bound=round(sum(Upper_bound), digits=1))
)
df.plot$item_id <- as.factor(df.plot$item_id)
df.plot$complete_qty <- as.factor(df.plot$complete_qty)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.time()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
submenu.content <- list("LL" = menuSubItem("Scenario LL", tabName = "LL"),
"LH" = menuSubItem("Scenario LH", tabName = "LH"),
"ML" = menuSubItem("Scenario ML", tabName = "ML"),
"MH" = menuSubItem("Scenario MH", tabName = "MH"),
"HL" = menuSubItem("Scenario HL", tabName = "HL"),
"HH" = menuSubItem("Scenario HH", tabName = "HH"))
append(submenu.content,list("end"=menuSubItem("Scenario HH", tabName = "HH")))
df.employee <- read.csv("fakeEmployee.csv")
tuple(1,2,3)
gs_add_row(ss,ws=1,input=c(c(1,2,3)))
googlesheets::gs_auth(token = "shiny_app_token.rds")
sheet_key <- "1VSSv36D8ngNDe9TAAtU0OLBQ2JoSiTFFleqa_Y3r6GA"
ss <- googlesheets::gs_key(sheet_key)
gs_add_row(ss,ws=1,input=c(c(1,2,3)))
gs_add_row(ss,ws=1,input=c(1,2,3,4,5,c(1,2,3)))
str(df.employee$Lower_bound[1])+','+str(df.employee$predicted_hrs[1])+','+str(df.employee$Upper_bound[1])
paste0(str(df.employee$Lower_bound[1]),',',str(df.employee$predicted_hrs[1]),',',str(df.employee$Upper_bound[1]))
paste(str(df.employee$Lower_bound[1]),',',str(df.employee$predicted_hrs[1]),',',str(df.employee$Upper_bound[1]))
str(df.employee$Lower_bound[1])
paste(df.employee$Lower_bound[1],',',str(df.employee$predicted_hrs[1]),',',str(df.employee$Upper_bound[1]))
paste(df.employee$Lower_bound[1],',',df.employee$predicted_hrs[1],',',df.employee$Upper_bound[1])
test <- paste(df.employee$Lower_bound[1],',',df.employee$predicted_hrs[1],',',df.employee$Upper_bound[1])
gs_add_row(ss,ws=1,input=c(1,2,3,4,5,test)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
